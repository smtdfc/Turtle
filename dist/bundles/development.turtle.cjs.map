{"version":3,"file":"development.turtle.cjs","sources":["../../src/dev/events.js","../../src/dev/listeners.js","../../src/dev/dev.js","../../src/dev/emitter.js","../../src/component/base.js","../../src/render/data.js","../../src/render/parser.js","../../src/render/directives.js","../../src/component/ref.js","../../src/render/process.js","../../src/render/render.js","../../src/component/state.js","../../src/context/context.js","../../src/component/component.js","../../src/service/service.js","../../src/app/app.js","../../src/modules/router/components.js","../../src/modules/router/index.js","../../src/modules/form/index.js","../../src/features/loader.js","../../src/features/performance.js","../../src/index.js","../../src/development.js"],"sourcesContent":["/**\n * @constant {string} APP_INIT - Event triggered when the application is initialized.\n */\nexport const APP_INIT = \"APP_INIT\";\n\n/**\n * @constant {string} APP_ATTACHED - Event triggered when the application is attached to the DOM.\n */\nexport const APP_ATTACHED = \"APP_ATTACHED\";\n\n/**\n * @constant {string} APP_DESTROYED - Event triggered when the application is destroyed.\n */\nexport const APP_DESTROYED = \"APP_DESTROYED\";\n\n/**\n * @constant {string} COMPONENT_INIT - Event triggered when a component is initialized.\n */\nexport const COMPONENT_INIT = \"COMPONENT_INIT\";\n\n/**\n * @constant {string} COMPONENT_ATTACHED - Event triggered when a component is attached to the DOM.\n */\nexport const COMPONENT_ATTACHED = \"COMPONENT_ATTACHED\";\n\n/**\n * @constant {string} COMPONENT_DESTROYED - Event triggered when a component is destroyed.\n */\nexport const COMPONENT_DESTROYED = \"COMPONENT_DESTROYED\";\n\n/**\n * @constant {string} COMPONENT_UPDATED - Event triggered when a component is updated.\n */\nexport const COMPONENT_UPDATED = \"COMPONENT_UPDATED\";\n\n/**\n * @constant {string} COMPONENT_RENDERED - Event triggered when a component is rendered.\n */\nexport const COMPONENT_RENDERED = \"COMPONENT_RENDERED\";","import * as TurtleDevEvents from './events.js';\n\n/**\n * Initializes the event listener for Turtle development events.\n * This function listens for the \"turtledev\" custom event and processes \n * the details according to the event type.\n */\nexport async function initListener() {\n  window.addEventListener(\"turtledev\", function(event) {\n    let details = event.detail;\n    let eventName = details.name;\n    let data = details.data;\n    let ID = (Math.floor(Math.random() * 99999999) * Date.now()).toString(32);\n\n    switch (eventName) {\n      case TurtleDevEvents.APP_INIT:\n        if (!data._turtle_dev_id) {\n          data._turtle_dev_id = ID;\n          data._turtle_dev_data = {\n            type: \"app\",\n            verify: true,\n            status: \"init\",\n            target: data\n          };\n        }\n        window.__TURTLE_DEV__.apps[data._turtle_dev_id] = data;\n        break;\n\n      case TurtleDevEvents.COMPONENT_INIT:\n        if (!data._turtle_dev_id) {\n          data._turtle_dev_id = ID;\n          data._turtle_dev_data = {\n            type: \"component\",\n            verify: true,\n            status: \"init\",\n            target: data\n          };\n        }\n        window.__TURTLE_DEV__.components[data._turtle_dev_id] = data;\n        break;\n\n      default:\n        // Uncomment to throw an error for unknown dev events\n        // throw \"[Turtle Dev Error] Unknown dev event!\";\n    }\n  });\n}","import { initListener } from './listeners.js';\n\n/**\n * Initializes the Turtle Development Mode.\n * \n * This function checks if the development mode is enabled in the Turtle framework.\n * If so, it sets up logging for development tools, initializes tracking for apps and components,\n * and activates additional debugging features.\n */\nexport function initDevMode() {\n  if (window.__TURTLE__.dev) {\n    console.info(\"Turtle Development Mode is activated !\");\n    console.info(\"In development mode, you can access additional debugging tools and features.\");\n\n    // Initialize the development tracking object\n    window.__TURTLE_DEV__ = {\n      apps: {},\n      components: {},\n    };\n\n    console.info(\"Tracking initialized. Use window.__TURTLE_DEV__.apps and window.__TURTLE_DEV__.components to monitor your applications and components.\");\n\n    // Initialize event listeners for debugging\n    initListener();\n  }\n}","/**\n * Emits a development event for the Turtle framework.\n *\n * This function creates and dispatches a custom event named \"turtledev\" \n * if the development mode is activated. The event includes the specified \n * event name and associated data as its detail.\n *\n * @param {string} name - The name of the event to emit.\n * @param {*} data - The data associated with the event.\n */\nexport function emitDevEvent(name, data) {\n  if (!window.__TURTLE__.dev) return;\n\n  window.dispatchEvent(new CustomEvent(\"turtledev\", {\n    detail: {\n      name,\n      data\n    }\n  }));\n}","import { emitDevEvent } from '../dev/emitter.js';\nimport * as TURTLE_DEV_EVENTS from '../dev/events.js';\n\n/**\n * Custom element that represents a Turtle component in the DOM.\n * Extends HTMLElement to manage lifecycle and interaction with the Turtle component.\n */\nexport class TurtleComponentElement extends HTMLElement {\n  /**\n   * Creates an instance of TurtleComponentElement.\n   */\n  constructor() {\n    super();\n    this.app = null; // The Turtle application instance.\n    this.component = null; // The Turtle component instance.\n  }\n\n  /**\n   * Attaches a Turtle application and component to this custom element.\n   * @param {Object} app - The Turtle application instance.\n   * @param {Object} parent - The parent component or context of this component.\n   * @param {TurtleComponent} component - The Turtle component instance.\n   */\n  attach(app, parent, component) {\n    this.app = app;\n    this.component = component;\n    this.component.parent = parent;\n    this.component.contexts.parent = parent;\n    this.component.element = this;\n    this.component.app = app;\n    emitDevEvent(TURTLE_DEV_EVENTS.COMPONENT_ATTACHED, component);\n  }\n\n  /**\n   * Lifecycle method called when the element is inserted into the DOM.\n   * Initializes and starts the attached component.\n   */\n  connectedCallback() {\n    this.component.onInit();\n    this.component.start();\n    this.component.onCreate();\n    this.component.startRender();\n  }\n\n  /**\n   * Lifecycle method called when the element is removed from the DOM.\n   * Can be used for cleanup operations if needed.\n   */\n  disconnectedCallback() {\n    this.component.onDestroy();\n    // Add any cleanup code here if necessary\n  }\n}\n\n// Define the custom element \"turtle-component\" with the TurtleComponentElement class.\nwindow.customElements.define(\"turtle-component\", TurtleComponentElement);","/**\n * Represents the rendering Data for Turtle components.\n * This class manages references, bindings, and events for rendering.\n */\nexport class TurtleRenderData {\n  /**\n   * Creates an instance of TurtleRenderData.\n   * \n   * @param {DocumentFragment} [root] - The root element for rendering. Defaults to a new DocumentFragment.\n   */\n  constructor(root) {\n    this.root = root ?? document.createDocumentFragment();\n    this.refs = {};\n    this.bindings = {};\n    this.events = {};\n  }\n\n  /**\n   * Adds a binding for a specific state.\n   * \n   * @param {string} state - The name of the state to bind.\n   * @param {Object} configs - Configuration object for the binding, which may include callback functions or parameters.\n   */\n  addBinding(state, configs) {\n    if (!this.bindings[state]) {\n      this.bindings[state] = [];\n    }\n    this.bindings[state].push(configs);\n  }\n\n  /**\n   * Adds a reference to a DOM element with a unique name.\n   * \n   * @param {string} name - The unique name for the reference.\n   * @param {HTMLElement} element - The DOM element to be referenced.\n   * @throws {Error} Throws an error if a reference with the same name already exists.\n   * @private\n   */\n  addRef(name, element) {\n    if (this.refs[name]) {\n      throw new Error(`[Turtle Render Error] Multiple elements are assigned the same ref, which is not allowed. Each ref must be unique to a single DOM element.`);\n    }\n\n    this.refs[name] = element;\n  }\n\n  /**\n   * Retrieves a referenced DOM element by its unique name.\n   * \n   * @param {string} name - The unique name for the reference.\n   * @returns {HTMLElement} - The referenced DOM element.\n   * @throws {Error} Throws an error if no reference with the given name exists.\n   */\n  getRef(name) {\n    const ref = this.refs[name];\n    if (!ref) {\n      throw new Error(`[Turtle Render Error] No ref found with the name: ${name}`);\n    }\n    return ref;\n  }\n\n  /**\n   * Removes a reference by its unique name.\n   * \n   * @param {string} name - The unique name for the reference to remove.\n   * @throws {Error} Throws an error if no reference with the given name exists.\n   */\n  removeRef(name) {\n    if (!this.refs[name]) {\n      throw new Error(`[Turtle Render Error] Cannot remove ref: No ref found with the name: ${name}`);\n    }\n    delete this.refs[name];\n  }\n}","/**\n * Parses a string of HTML content and wraps it in a root element.\n * \n * @param {string} content - The HTML content to parse.\n * @returns {Element|null} - Returns the root element if parsing is successful, or null if there is a parsing error.\n * @throws {Error} Throws an error if there is a parsing issue with detailed information.\n */\nexport function parseHTML(content) {\n  let parser = new DOMParser();\n  let doc = parser.parseFromString(`<root>${content}</root>`, \"text/xml\");\n  let parserError = doc.getElementsByTagName(\"parsererror\");\n\n  if (parserError.length > 0) {\n    const errorMessage = \"Rendering error: \" + parserError[0].textContent;\n    console.log(errorMessage);\n    throw new Error(errorMessage);\n  } else {\n    return doc.getElementsByTagName(\"root\")[0];\n  }\n}","/**\n * Represents an event directive for adding event listeners to a target element.\n */\nexport class EventDirective {\n  /**\n   * Creates an instance of EventDirective.\n   * \n   * @param {HTMLElement} target - The target element to attach the event listener to.\n   * @param {string} name - The name of the event to listen for.\n   * @param {string} value - The name of the method to call on the event.\n   * @param {Object} context - The context in which the event method is defined.\n   */\n  constructor(target, name, value, context) {\n    this.target = target;\n    this.name = name;\n    this.value = value;\n    this.context = context;\n  }\n\n  /**\n   * Applies the event directive by adding the event listener to the target element.\n   */\n  apply() {\n    if (this.context.root[this.value]) {\n      this.target.addEventListener(this.name, this.context.root[this.value].bind(this.context.root));\n    }\n  }\n}\n\n/**\n * Represents a binding directive for binding attributes to a target element.\n */\nexport class BindingDirective {\n  /**\n   * Creates an instance of BindingDirective.\n   * \n   * @param {HTMLElement} target - The target element to bind the attribute to.\n   * @param {string} name - The name of the attribute to bind.\n   * @param {string} value - The state name to bind to the attribute.\n   * @param {Object} context - The context for the binding.\n   */\n  constructor(target, name, value, context) {\n    this.target = target;\n    this.name = name;\n    this.value = value;\n    this.context = context;\n  }\n\n  /**\n   * Applies the binding directive by adding a binding for the attribute to the target element.\n   */\n  apply() {\n    this.context.addBinding(this.value, {\n      type: \"attribute\",\n      name: this.name,\n      state: this.value,\n      target: this.target\n    });\n  }\n}\n\n/**\n * Represents an HTML directive for binding innerHTML to a target element.\n */\nexport class HTMLDirective {\n  /**\n   * Creates an instance of HTMLDirective.\n   * \n   * @param {HTMLElement} target - The target element to bind innerHTML to.\n   * @param {string} name - The name of the property (always 'innerHTML').\n   * @param {string} value - The state name to bind to innerHTML.\n   * @param {Object} context - The context for the binding.\n   */\n  constructor(target, name, value, context) {\n    this.target = target;\n    this.name = name;\n    this.value = value;\n    this.context = context;\n  }\n\n  /**\n   * Applies the HTML directive by adding a binding for innerHTML to the target element.\n   */\n  apply() {\n    this.context.addBinding(this.value, {\n      type: \"property\",\n      name: \"innerHTML\",\n      state: this.value,\n      target: this.target\n    });\n  }\n}\n\n/**\n * Represents a text content directive for binding textContent to a target element.\n */\nexport class TextContentDirective {\n  /**\n   * Creates an instance of TextContentDirective.\n   * \n   * @param {HTMLElement} target - The target element to bind textContent to.\n   * @param {string} name - The name of the property (always 'textContent').\n   * @param {string} value - The state name to bind to textContent.\n   * @param {Object} context - The context for the binding.\n   */\n  constructor(target, name, value, context) {\n    this.target = target;\n    this.name = name;\n    this.value = value;\n    this.context = context;\n  }\n\n  /**\n   * Applies the text content directive by adding a binding for textContent to the target element.\n   */\n  apply() {\n    this.context.addBinding(this.value, {\n      type: \"property\",\n      name: \"textContent\",\n      state: this.value,\n      target: this.target\n    });\n  }\n}\n\n/**\n * Represents a reference directive for adding a reference to a DOM element.\n */\nexport class RefDirective {\n  /**\n   * Creates an instance of RefDirective.\n   * \n   * @param {HTMLElement} target - The target element to be referenced.\n   * @param {string} name - The name of the reference.\n   * @param {string} value - The unique name to assign to the reference.\n   * @param {Object} context - The context for managing references.\n   */\n  constructor(target, name, value, context) {\n    this.target = target;\n    this.name = name;\n    this.value = value;\n    this.context = context;\n  }\n\n  /**\n   * Applies the reference directive by adding a reference to the target element.\n   */\n  apply() {\n    this.context.addRef(this.value, this.target);\n  }\n}","/**\n * Represents a reference to the element associated with a Turtle component.\n */\nexport class TurtleComponentRef {\n  #element;\n\n  /**\n   * Creates an instance of TurtleComponentRef.\n   * @param {HTMLElement} element - The HTML element associated with the Turtle component.\n   */\n  constructor(element) {\n    if (!element) {\n      throw new Error('[Turtle Component Ref Error] An element must be provided.');\n    }\n    this.#element = element;\n  }\n\n  /**\n   * Gets the forward references of the component associated with the element.\n   * @returns {Object} The forward references of the component.\n   * @throws {Error} If the element does not have an associated component.\n   */\n  get component() {\n    if (!this.#element.component) {\n      throw new Error('[Turtle Component Ref Error] The element does not have an associated component.');\n    }\n    return this.#element.component.forwardRefs;\n  }\n\n  // You can add more methods here to interact with the component or element.\n}","import { EventDirective, BindingDirective, HTMLDirective, TextContentDirective, RefDirective } from './directives.js';\nimport { TurtleComponentRef } from '../component/ref.js';\n\n/**\n * Extracts the name from the directive based on the given prefix.\n *\n * @param {string} name - The name of the directive.\n * @param {string} start - The prefix to extract from the name.\n * @returns {string|null} The extracted name without the prefix, or null if the prefix is not found.\n */\nfunction extractName(name, start) {\n  if (name.startsWith(start)) return name.substring(start.length);\n  return null;\n}\n\n/**\n * Applies a directive based on its name and value to a target element.\n *\n * @param {HTMLElement} target - The target element to which the directive is applied.\n * @param {string} name - The name of the directive.\n * @param {string} value - The value associated with the directive.\n * @param {Object} context - The context in which the directive is applied.\n * @returns {boolean} Returns true if the directive was successfully applied, otherwise false.\n */\nfunction applyDirective(target, name, value, context) {\n  let passed = false;\n  for (let prefix in directives) {\n    const ename = extractName(name, prefix);\n    const DirectiveClass = directives[ename != null ? prefix : name];\n    if (!DirectiveClass) {\n      continue;\n    }\n    const directiveInstance = new DirectiveClass(target, ename, value, context);\n    if (typeof directiveInstance.apply === 'function') {\n      directiveInstance.apply();\n      passed = true;\n    }\n    break;\n  }\n  return passed;\n}\n\n// Map of directive prefixes to their corresponding classes\nconst directives = {\n  \"tevent-\": EventDirective,\n  \"tbind-\": BindingDirective,\n  \"thtml\": HTMLDirective,\n  \"ttext\": TextContentDirective,\n  \"ref\": RefDirective\n};\n\n/**\n * Processes attributes of a given node and applies directives accordingly.\n *\n * @param {HTMLElement} target - The target element to process attributes for.\n * @param {Element} node - The node from which to extract attributes.\n * @param {Object} context - The context in which the attributes are processed.\n * @param {Object} data - Additional data to be used during processing.\n */\nexport function processAttribute(target, node, context, data) {\n  for (let attribute of Array.from(node.attributes)) {\n    let name = attribute.name;\n    let value = attribute.value;\n    let isDirective = applyDirective(target, name, value, context);\n    if (!isDirective) {\n      target.setAttribute(name, value);\n    }\n  }\n}\n\n/**\n * Processes a DOM tree, creating elements and applying directives as needed.\n *\n * @param {HTMLElement} element - The parent element to which new elements are appended.\n * @param {Node} tree - The DOM tree to process.\n * @param {Object} context - The context for processing.\n * @param {Object} data - Additional data, including component mappings.\n * @param {Object} app - The application context for components.\n */\nexport function process(element, tree, context, data, app) {\n  for (let node of Array.from(tree.childNodes)) {\n    if (node.nodeType === Node.TEXT_NODE) {\n      element.appendChild(node);\n    } else if (node.nodeType === Node.ELEMENT_NODE) {\n      if (data.components[node.nodeName]) {\n        let component = data.components[node.nodeName];\n        let componentElement = document.createElement(\"turtle-component\");\n        componentElement.attach(app, context.root, component);\n        if (node.getAttribute(\"ref\")) {\n          context.addRef(\n            node.getAttribute(\"ref\"),\n            new TurtleComponentRef(componentElement)\n          );\n        }\n        element.appendChild(componentElement);\n      } else {\n        let newElement = document.createElement(node.tagName);\n        processAttribute(newElement, node, context, data);\n        if (node.childNodes.length > 0) process(newElement, node, context, data);\n        element.appendChild(newElement);\n      }\n    }\n  }\n}","import { TurtleRenderData } from './data.js';\nimport { TurtleComponent } from '../component/component.js';\nimport { parseHTML } from './parser.js';\nimport { process } from './process.js';\n\n/**\n * Renders a template by processing its raw HTML and inserting values into it.\n *\n * @param {HTMLElement} element - The parent element to which the rendered content will be appended.\n * @param {TemplateStringsArray} template - The template containing the raw HTML and associated values.\n * @param {TurtleRenderData} [context=new TurtleRenderData()] - The context for rendering, defaulting to a new instance.\n * @param {Object|null} [app=null] - The application context, optional parameter.\n * @returns {HTMLElement} The parent element after rendering the template.\n */\nexport function render(element, template, context = new TurtleRenderData(), app = null) {\n  let raw = template.raw; // Raw HTML string from the template\n  let values = template.values; // Values to be inserted into the raw HTML\n  let data = {\n    components: {} // Object to hold components being rendered\n  };\n\n  for (let i = 0; i < values.length; i++) {\n    let key = `turtle-component-${(Math.floor(Math.random() * 999999) * Date.now()).toString(16)}`;\n    if (values[i]) {\n      if (values[i] instanceof TurtleComponent) {\n        data.components[key] = values[i]; // Store the component\n        values[i] = key; // Replace component with its key in values\n      } else if (values[i].instance === TurtleComponent) {\n        data.components[key] = values[i]({}); // Call the instance function if it's a component\n        values[i] = key; // Replace instance with its key\n      }\n    }\n  }\n\n  let content = String.raw(raw, ...values);\n  let tree = parseHTML(content);\n\n  process(element, tree, context, data, app);\n\n  return element;\n}\n\nexport class TurtleRenderHelper{\n  constructor(app,root,context=new TurtleRenderData()){\n    this.app = app\n    this.context = context \n    this.root = root\n  }\n  \n  fragment(raw,...values){\n    return render(document.createDocumentFragment(), { raw, values }, this.context, this.app)\n  }\n  \n  render(raws,...values){\n    this.root.textContent = \"\"\n    this.root.appendChild(render(document.createDocumentFragment(), { raw, values }, this.context, this.app))\n  }\n}","/**\n * Represents a state for a Turtle component.\n * It holds the state name, value, and manages updates when the state changes.\n */\nexport class TurtleComponentState {\n\n  /**\n   * Creates an instance of TurtleComponentState.\n   * \n   * @param {string} name - The name of the state.\n   * @param {*} value - The initial value of the state.\n   * @param {Object} component - The component that the state is associated with.\n   */\n  constructor(name, value, component) {\n    this.name = name;\n    this.value = value;\n    this.component = component;\n    this.reactive = true;\n  }\n\n  /**\n   * Retrieves the current value of the state.\n   * \n   * @returns {*} The current value of the state.\n   */\n  get() {\n    return this.value;\n  }\n\n  /**\n   * Sets a new value for the state and triggers a component update if it's reactive.\n   * \n   * @param {*} value - The new value to set for the state.\n   * @returns {*} The updated value.\n   */\n  set(value) {\n    this.value = value;\n    // Trigger the watcher if one is defined for this state.\n    if (this.component.watchers[this.name]) {\n      this.component.watchers[this.name](value);\n    }\n    // Trigger a component update if the component and state are reactive.\n    if (this.component.reactive && this.reactive) {\n      this.component.requestUpdate({\n        state: this.name,\n        value: value\n      });\n    }\n\n    return value;\n  }\n\n  /**\n   * Synchronizes the state with a given context and key, establishing a binding.\n   * \n   * @param {Object} context - The context to bind the state to.\n   * @param {string} key - The key under which the state will be bound in the context.\n   * @returns {TurtleComponentState} The instance of the state for chaining.\n   */\n  sync(context, key) {\n    context.sync(key, this);\n    return this;\n  }\n}","/**\n * Represents a context for managing bindings and values in the Turtle framework.\n */\nexport class TurtleContext {\n  constructor() {\n    this._bindings = {};\n    this._values = {};\n    this._events = {};\n    this._isLocal = false;\n  }\n\n  /**\n   * Updates all reactive bindings for a given name with a new value.\n   * \n   * @param {string} name - The name of the binding to update.\n   * @param {*} value - The new value to set for the binding.\n   * @private\n   */\n  _reactive(name, value) {\n    if (!this._bindings[name]) this._bindings[name] = [];\n    for (const bond of this._bindings[name]) {\n      bond.set(value);\n    }\n  }\n\n  /**\n   * Sets a value for a given name and triggers reactive updates.\n   * \n   * @param {string} name - The name of the value to set.\n   * @param {*} value - The value to set.\n   */\n  set(name, value) {\n    this._values[name] = value;\n    this._reactive(name, value);\n  }\n\n  /**\n   * Retrieves the value for a given name.\n   * \n   * @param {string} name - The name of the value to retrieve.\n   * @returns {*} The value associated with the name.\n   */\n  get(name) {\n    return this._values[name];\n  }\n\n  /**\n   * Synchronizes a state with a given name, establishing a binding.\n   * \n   * @param {string} name - The name to bind the state to.\n   * @param {Object} state - The state object to bind.\n   */\n  sync(name, state) {\n    if (!this._bindings[name]) this._bindings[name] = [];\n    this._bindings[name].push(state);\n  }\n\n  /**\n   * Registers an event listener for a specified event name.\n   * @param {string} name - The name of the event.\n   * @param {Function} callback - The callback function to execute when the event occurs.\n   */\n  on(name, callback) {\n    if (!this._events[name]) {\n      this._events[name] = [];\n    }\n    this._events[name].push(callback);\n  }\n\n  /**\n   * Unregisters an event listener for a specified event name.\n   * @param {string} name - The name of the event.\n   * @param {Function} callback - The callback function to remove.\n   */\n  off(name, callback) {\n    if (this._events[name]) {\n      this._events[name] = this.events[name].filter(cb => cb !== callback);\n    }\n  }\n\n  /**\n   * Triggers an event with the specified name and data.\n   * @param {string} name - The name of the event to trigger.\n   * @param {*} data - The data to pass to the event callbacks.\n   */\n  emit(name, data) {\n    if (this._events[name]) {\n      this._events[name].forEach(callback => callback(data));\n    }\n  }\n}\n\n/**\n * Manages context retrieval and usage in the Turtle framework.\n */\nexport class TurtleContextManagement {\n  constructor(parent, target) {\n    this.parent = parent;\n    this.target = target;\n  }\n\n  /**\n   * Retrieves a context by its name, optionally allowing child access.\n   * \n   * @param {string} name - The name of the context to retrieve.\n   * @param {boolean} isChildAccess - Whether to allow access to child contexts.\n   * @returns {TurtleContext|null} The requested context or null if not found.\n   */\n  get(name, isChildAccess = false) {\n    if (this.target._contexts[name] && (isChildAccess && this.target._contexts[name]._isLocal)) {\n      return null;\n    }\n\n    if (this.target._contexts[name]) {\n      return this.target._contexts[name];\n    } else if (this.parent) {\n      return this.parent.contexts.get(name, true);\n    }\n  }\n\n  /**\n   * Uses a context with a given name and associates it with the target.\n   * \n   * @param {string} name - The name of the context to use.\n   * @param {TurtleContext} context - The context to use.\n   * @param {boolean} isLocal - Indicates whether the context is local.\n   */\n  use(name, context, isLocal = false) {\n    if (this.target._contexts[name] || (this.parent && this.parent.contexts.get(name))) {\n      console.warn(`[Turtle Data Warning] Context key \"${name}\" already exists. The existing context will be overwritten.`);\n    }\n    this.target._contexts[name] = context;\n    this.target._contexts[name]._isLocal = isLocal;\n  }\n}","import { emitDevEvent } from '../dev/emitter.js';\nimport * as TURTLE_DEV_EVENTS from '../dev/events.js';\n\nimport { render } from '../render/render.js';\nimport { TurtleRenderData } from '../render/data.js';\nimport { TurtleComponentState } from './state.js';\nimport { TurtleContextManagement, TurtleContext } from '../context/context.js';\n\n/**\n * Represents a Turtle Component.\n */\nexport class TurtleComponent {\n  /**\n   * Creates an instance of TurtleComponent.\n   * @param {Object} props - The properties passed to the component.\n   */\n  constructor(props) {\n    this.parent = null;\n    this.app = null;\n    this.element = null;\n    this.props = props;\n    this.watchers = {};\n    this.forwardRefs = {};\n    this.states = {};\n    this.reactive = true;\n    this._contexts = {};\n    this.contexts = new TurtleContextManagement(this.parent, this);\n    this.renderContext = new TurtleRenderData(this);\n    emitDevEvent(TURTLE_DEV_EVENTS.COMPONENT_INIT, this);\n  }\n\n  /**\n   * Registers a context for use within the component.\n   * @param {string} name - The name of the context.\n   * @param {TurtleContext} context - The context instance.\n   * @throws {Error} Throws an error if the context is not an instance of TurtleContext.\n   */\n  useContext(name, context,isLocal=false) {\n    if (!(context instanceof TurtleContext)) {\n      throw new Error('[Turtle Data Error] Context must be an instance of TurtleContext');\n    }\n    this.contexts.use(name, context,isLocal);\n    return context\n  }\n\n  /**\n   * Retrieves a context by name.\n   * @param {string} name - The name of the context.\n   * @returns {TurtleContext} The requested context instance.\n   */\n  getContext(name) {\n    return this.contexts.get(name);\n  }\n\n  /**\n   * Gets the references from the render context.\n   * @returns {Object} The refs object.\n   */\n  get refs() {\n    return this.renderContext.refs;\n  }\n\n  /**\n   * Creates a new state for the component.\n   * @param {string} name - The name of the state.\n   * @param {*} value - The initial value of the state.\n   * @returns {TurtleComponentState} The created state object.\n   */\n  createState(name, value) {\n    let state = new TurtleComponentState(name, value, this);\n    this.states[name] = state;\n    return state;\n  }\n\n  /**\n   * Sets the state of the component.\n   * @param {string} name - The name of the state.\n   * @param {*} value - The new value of the state.\n   */\n  setState(name, value) {\n    if (!this.states[name]) {\n      this.states[name] = new TurtleComponentState(name, value, this);\n    }\n    this.states[name].set(value);\n  }\n\n  /**\n   * Gets the value of a specific state.\n   * @param {string} name - The name of the state.\n   * @returns {*} The value of the state.\n   */\n  getState(name) {\n    return this.states[name].get();\n  }\n\n  /**\n   * Gets the state object by its name.\n   * @param {string} name - The name of the state.\n   * @returns {TurtleComponentState} The state object.\n   */\n  state(name) {\n    return this.states[name];\n  }\n\n  /**\n   * Creates a fragment using a template literal and values.\n   * @param {TemplateStringsArray} raw - The raw template literal.\n   * @param {...*} values - The values to be used in the template.\n   * @returns {DocumentFragment} The rendered HTML as a DocumentFragment.\n   */\n  html(raw, ...values) {\n    let fragment = render(document.createDocumentFragment(), { raw, values }, this.renderContext, this.app);\n    return fragment;\n  }\n\n  /**\n   * Sets up the initial states for the component.\n   * Should be overridden by subclasses.\n   * @returns {Object} An object containing initial state values.\n   */\n  setupState() {\n    return {};\n  }\n\n  /**\n   * Sets up watchers for the component.\n   * Should be overridden by subclasses.\n   * @returns {Object} An object containing watcher functions.\n   */\n  setupWatcher() {\n    return {};\n  }\n\n  /**\n   * Sets up forward references for the component.\n   * Should be overridden by subclasses.\n   * @returns {Object} An object containing forward references.\n   */\n  setupForwardRef() {\n    return {};\n  }\n\n  /**\n   * Lifecycle method called when the component is initialized.\n   * Should be overridden by subclasses.\n   */\n  onInit() {}\n\n  /**\n   * Lifecycle method called when the component is created.\n   * Should be overridden by subclasses.\n   */\n  onCreate() {}\n\n  /**\n   * Lifecycle method called when the component is destroyed.\n   * Should be overridden by subclasses.\n   */\n  onDestroy() {}\n\n  /**\n   * Lifecycle method called after the component is rendered.\n   * Should be overridden by subclasses.\n   */\n  onRender() {}\n\n  /**\n   * Lifecycle method called when the component is updated.\n   * Should be overridden by subclasses.\n   * @param {Object} commit - The commit object representing state changes.\n   */\n  onUpdate(commit) {}\n\n  /**\n   * Returns the template of the component.\n   * Should be overridden by subclasses.\n   * @returns {DocumentFragment} The template as a DocumentFragment.\n   */\n  template() {}\n\n  /**\n   * Requests an update for the component and triggers the onUpdate lifecycle method.\n   * @param {Object} commit - The commit object representing state changes.\n   * @returns {Promise<void>}\n   */\n  async requestUpdate(commit) {\n    this._reactive(commit);\n    emitDevEvent(TURTLE_DEV_EVENTS.COMPONENT_UPDATED, this);\n    this.onUpdate(commit);\n  }\n\n  /**\n   * Requests a render for the component using its template.\n   * @returns {Promise<void>}\n   */\n  async requestRender() {\n    let fragment = this.template();\n    this.element.textContent = \"\";\n    this.element.appendChild(fragment);\n    emitDevEvent(TURTLE_DEV_EVENTS.COMPONENT_RENDERED, this);\n    this.onRender();\n  }\n\n  /**\n   * Handles reactivity for state changes.\n   * @param {Object} commit - The commit object representing state changes.\n   */\n  _reactive(commit) {\n    let bindings = this.renderContext.bindings[commit.state];\n    if (!bindings) return;\n    for (let bind of bindings) {\n      if (bind.type === \"property\") bind.target[bind.name] = commit.value;\n      if (bind.type === \"attribute\") bind.target.setAttribute(bind.name, commit.value);\n    }\n  }\n\n  /**\n   * Initializes the states for the component.\n   * @param {Object} states - An object containing state names and initial values.\n   */\n  initStates(states) {\n    for (let stateName in states) {\n      this.states[stateName] = new TurtleComponentState(stateName, states[stateName], this);\n    }\n  }\n\n  /**\n   * Starts the component by setting up forward references, watchers, and states, then requests a render.\n   */\n  start() {\n    this.forwardRefs = this.setupForwardRef() ?? {};\n    this.watchers = this.setupWatcher() ?? {};\n    this.initStates(this.setupState() ?? {});\n    \n  }\n  \n  startRender(){\n    this.requestRender();\n  }\n}\n\n/**\n * Creates a new TurtleComponent instance.\n * @param {Function} constructor - The constructor function for the TurtleComponent.\n * @returns {Function} A function that creates an instance of the specified component.\n */\nexport function createComponent(constructor) {\n  /**\n   * Initializes the component with the given properties.\n   * @param {Object} props - The properties to be passed to the component.\n   * @returns {TurtleComponent} The instantiated component.\n   */\n  function fn(...props) {\n    let component = new constructor(props);\n    component.props = props;\n    return component;\n  }\n\n  fn.instance = TurtleComponent;\n  return fn;\n}","import { TurtleContextManagement, TurtleContext } from '../context/context.js';\n\n/**\n * Represents a service that manages contexts and methods for an entity.\n */\nexport class TurtleService {\n  /**\n   * Creates an instance of TurtleService.\n   *\n   * @param {Object} entity - The entity that this service will manage.\n   */\n  constructor(entity) {\n    this.entity = entity;\n    this.methods = {};\n    this._contexts = {};\n    this.contexts = new TurtleContextManagement(this.entity, this);\n  }\n\n  /**\n   * Uses a context by name and sets it in the service.\n   *\n   * @param {string} name - The name of the context.\n   * @param {TurtleContext} context - The context to set, must be an instance of TurtleContext.\n   * @throws {Error} Throws an error if the context is not an instance of TurtleContext.\n   */\n  useContext(name, context) {\n    if (!(context instanceof TurtleContext)) {\n      throw new Error('[Turtle Data Error] Context must be an instance of TurtleContext');\n    }\n    this.contexts.set(name, context);\n  }\n\n  /**\n   * Retrieves a context by name.\n   *\n   * @param {string} name - The name of the context to retrieve.\n   * @returns {TurtleContext|null} The context associated with the given name, or null if not found.\n   */\n  getContext(name) {\n    return this.contexts.get(name);\n  }\n\n  /**\n   * Defines a method with a name and a callback.\n   *\n   * @param {string} name - The name of the method to define.\n   * @param {Function} callback - The callback function to be executed when the method is called.\n   */\n  define(name, callback) {\n    this.methods[name] = callback.bind(this);\n  }\n\n  /**\n   * Calls and returns all defined methods.\n   *\n   * @returns {Object} An object containing all defined methods.\n   */\n  call() {\n    return this.methods;\n  }\n}","import { emitDevEvent } from '../dev/emitter.js';\nimport * as TURTLE_DEV_EVENTS from '../dev/events.js';\n\nimport { render } from '../render/render.js';\nimport { TurtleRenderData } from '../render/data.js';\nimport { TurtleContextManagement, TurtleContext } from '../context/context.js';\n\n\n /**\n * Class representing the main application for the Turtle library.\n */\nexport class TurtleApp {\n  /**\n   * Creates an instance of TurtleApp.\n   * @param {Object} [configs={}] - Configuration options for the app.\n   */\n  constructor(configs = {}) {\n    this.root = null;\n    this.configs = configs;\n    this._contexts = {};\n    this.modules = [];\n    this.contexts = new TurtleContextManagement(null, this);\n    emitDevEvent(TURTLE_DEV_EVENTS.APP_INIT, this);\n  }\n\n  /**\n   * Initializes and uses a specified module.\n   * @param {Object} module - The module to be initialized.\n   * @param {Object} [configs] - Configuration options for the module.\n   * @returns {*} The result of the module's initialization.\n   */\n  useModule(module, configs) {\n    return module.init(this, configs);\n  }\n\n  /**\n   * Retrieves a context by its name.\n   * @param {string} name - The name of the context.\n   * @returns {TurtleContext|null} The context associated with the given name, or null if not found.\n   */\n  getContext(name) {\n    return this.contexts.get(name);\n  }\n\n  /**\n   * Attaches a context to the app by name.\n   * @param {string} name - The name of the context.\n   * @param {TurtleContext} context - An instance of TurtleContext to attach.\n   * @throws {Error} Throws an error if the context is not an instance of TurtleContext.\n   */\n  useContext(name, context) {\n    if (!(context instanceof TurtleContext)) {\n      throw new Error('[Turtle Data Error] Context must be an instance of TurtleContext');\n    }\n    this.contexts.use(name, context);\n  }\n\n  /**\n   * Attaches the specified HTML element as the root for rendering.\n   * @param {HTMLElement} element - The HTML element to use as the root.\n   * @throws {Error} Throws an error if the element is not an instance of HTMLElement.\n   */\n  attach(element) {\n    emitDevEvent(TURTLE_DEV_EVENTS.APP_ATTACHED, this);\n    if (element instanceof HTMLElement) {\n      this.root = element;\n    } else {\n      throw new Error('[Turtle Render Error] Element must be an instance of HTMLElement');\n    }\n  }\n\n  /**\n   * Renders the provided raw content and values into the root element.\n   * @param {TemplateStringsArray} raw - A template string containing the static parts of the template.\n   * @param {...*} values - Values to be interpolated into the template.\n   * @throws {Error} Throws an error if the root element is not attached.\n   */\n  render(raw, ...values) {\n    if (!this.root) {\n      throw new Error('[Turtle Render Error] Root element is not attached. Please attach a root element before rendering.');\n    }\n\n    this.root.textContent = \"\";\n    this.root.appendChild(render(document.createDocumentFragment(), { raw, values }, new TurtleRenderData(this), this));\n  }\n  \n  fragment(raw,...values){\n    return render(document.createDocumentFragment(), { raw, values }, new TurtleRenderData(this), this)\n  }\n  \n}","import { TurtleComponent, createComponent } from '../../component/component.js';\n\nexport class TurtleRouteComponent extends TurtleComponent {\n  constructor(props) {\n    super(props)\n    this.matched = false\n  }\n\n  onInit() {\n    const [routes] = this.props;\n\n    if (Array.isArray(routes)) {\n      this.routes = {};\n      routes.forEach(({ component, path }) => {\n        if (Array.isArray(path)) {\n          path.forEach(p => this.routes[p] = component);\n        } else {\n          this.routes[path] = component;\n        }\n      });\n    } else if (typeof routes === \"object\") {\n      this.routes = routes;\n    }\n\n  }\n\n  active() {\n    if (this.app.router) {\n      let router = this.app.router\n      let [status, matched] = router.match(Object.keys(this.routes), router.currentPath())\n      if ((status) && !this.matched) {\n        this.matched = true\n        this.element.appendChild(this.html`\n          <${this.routes[matched]}/>\n        `)\n      }\n      if (!status) {\n        this.matched = false\n        this.element.textContent = \"\"\n      }\n    }\n  }\n\n  onRender() {\n    this.active()\n    if (this.app.router) {\n      this.app.router.on(\"pagechange\", this.active.bind(this))\n    }\n  }\n\n  template() {\n    return this.html``\n  }\n}\n\n\nexport const TurtleRoute = createComponent(TurtleRouteComponent)","import { render } from '../../render/render.js';\nimport { TurtleRenderData } from '../../render/data.js';\n\n/**\n * TurtleRouterModule manages routing in a Turtle application.\n * It handles matching routes, invoking callbacks, and rendering components based on URLs.\n */\nexport class TurtleRouterModule {\n\n  /**\n   * Creates a new TurtleRouterModule instance.\n   *\n   * @param {Object} app - The Turtle app instance this router is attached to.\n   * @param {Object} configs - Configuration for the router, including the root element.\n   */\n  constructor(app, configs) {\n    this.root = configs.element ?? document.createElement(\"div\");\n    this._app = app;\n    this._app.modules.push(this);\n    this._app.router = this;\n    this.routes = {};\n    this.matched = null;\n    this.url = null;\n    this.params = {};\n    this.query = new URLSearchParams();\n    this.events = {\n      notallow: [],\n      notfound: [],\n      pagematches: [],\n      pageloaded: [],\n      pagechange: []\n    };\n  }\n\n  /**\n   * Registers an event listener for a specific router event.\n   *\n   * @param {string} event - The name of the event (e.g., 'pagechange', 'notfound').\n   * @param {function} callback - The function to call when the event is triggered.\n   */\n  on(event, callback) {\n    this.events[event].push(callback);\n  }\n\n  /**\n   * Unregisters an event listener for a specific router event.\n   *\n   * @param {string} event - The name of the event.\n   * @param {function} callback - The callback function to remove.\n   */\n  off(event, callback) {\n    this.events[event].forEach((fn, idx) => {\n      if (fn === callback) {\n        this.events[event].splice(idx, 1);\n      }\n    });\n  }\n\n  /**\n   * Initializes the TurtleRouterModule.\n   *\n   * @param {Object} app - The Turtle app instance.\n   * @param {Object} configs - Configuration for the router.\n   * @returns {TurtleRouterModule} - The initialized router module.\n   */\n  static init(app, configs) {\n    return new TurtleRouterModule(app, configs);\n  }\n\n  match(patterns, url) {\n    let u = new URL(url, window.location.origin);\n    url = u.pathname;\n\n    if (!patterns) return\n    for (let i = 0; i < patterns.length; i++) {\n      let route = patterns[i]\n      let routeSplited = route.split(\"/\");\n      let urlSplited = url.split(\"/\");\n      let passed = true;\n      let params = {};\n\n      if (urlSplited.length != routeSplited.length) {\n        passed = false;\n      } else {\n        for (let i = 0; i < routeSplited.length; i++) {\n          if (urlSplited[i] === undefined) {\n            passed = false;\n          }\n\n          if (routeSplited[i] == \"*\") {\n            break;\n          }\n\n          if (routeSplited[i][0] == \":\") {\n            let name = routeSplited[i].substring(1, routeSplited[i].length);\n            params[name] = urlSplited[i];\n            continue;\n          }\n\n          if (routeSplited[i] != urlSplited[i]) {\n            passed = false;\n          }\n        }\n      }\n      if (passed) return [true,route]\n    }\n    return [false,null]\n  }\n\n  /**\n   * Matches the provided URL against the router's routes.\n   *\n   * @param {string} url - The URL to match against the defined routes.\n   * @returns {Promise<void>} - A promise that resolves when the match is complete.\n   */\n  async matches(url) {\n    let u = new URL(url, window.location.origin);\n    url = u.pathname;\n    this.emitEvent(\"pagechange\", this);\n    for (let j = 0; j < Object.keys(this.routes).length; j++) {\n      let route = Object.keys(this.routes)[j];\n      let configs = this.routes[route];\n      let routeSplited = route.split(\"/\");\n      let urlSplited = url.split(\"/\");\n      let passed = true;\n      let params = {};\n\n      if (urlSplited.length != routeSplited.length) {\n        passed = false;\n      } else {\n        for (let i = 0; i < routeSplited.length; i++) {\n          if (urlSplited[i] === undefined) {\n            passed = false;\n          }\n\n          if (routeSplited[i] == \"*\") {\n            break;\n          }\n\n          if (routeSplited[i][0] == \":\") {\n            let name = routeSplited[i].substring(1, routeSplited[i].length);\n            params[name] = urlSplited[i];\n            continue;\n          }\n\n          if (routeSplited[i] != urlSplited[i]) {\n            passed = false;\n          }\n        }\n      }\n\n      if (passed) {\n        this.params = params;\n        this.query = u.searchParams;\n        this.matched = route;\n        this.url = url;\n        let component = new Function();\n        if (configs.callback) { await configs.callback(); }\n        if (configs.protect) {\n          let result = await configs.protect();\n          if (!result) {\n            this.triggerError(\"not_allow\");\n            return;\n          }\n        }\n        this.emitEvent(\"pagematches\", this);\n\n        if (configs.loader) {\n          component = await configs.loader();\n        }\n\n        if (configs.component) {\n          component = configs.component;\n        }\n        let ctx = this;\n        let element = this.root;\n\n        function renderContent(raw, ...values) {\n          element.textContent = \"\";\n          element.appendChild(render(document.createDocumentFragment(), { raw, values }, new TurtleRenderData(ctx._app), ctx._app));\n        }\n\n        this.emitEvent(\"pageloaded\", this);\n        return renderContent`<${component}/>`;\n      }\n    }\n\n    this.triggerError(\"not_found\");\n  }\n\n  /**\n   * Starts the router and listens for changes in the URL.\n   */\n  start() {\n    let started = false;\n    let path = window.location.hash;\n    if (path.length == 0) {\n      path = \"/\";\n      window.location = \"#\";\n    } else {\n      path = path.slice(2);\n    }\n\n    window.addEventListener(\"hashchange\", function() {\n      if (started) {\n        let path = window.location.hash;\n        if (path.length == 0) {\n          path = \"/\";\n        } else {\n          path = path.slice(2);\n        }\n\n        this.matches(path);\n      }\n    }.bind(this));\n    started = true;\n    this.matches(path);\n    started = true;\n  }\n\n  currentPath() {\n    let path = window.location.hash;\n    if (path.length == 0) {\n      path = \"/\";\n    } else {\n      path = path.slice(2);\n    }\n    return path\n  }\n\n  /**\n   * Redirects to a new route.\n   *\n   * @param {string} path - The path to navigate to.\n   * @param {boolean} [replace=false] - Whether to replace the current URL or push a new one.\n   */\n  redirect(path, replace = false) {\n    if (!replace) {\n      window.location.hash = `!${path}`;\n    } else {\n      window.history.replaceState(null, null, `./#!${path}`);\n      this.matches(path);\n    }\n  }\n\n  /**\n   * Emits an event.\n   *\n   * @param {string} name - The event name.\n   * @param {*} data - The data to pass with the event.\n   */\n  emitEvent(name, data) {\n    this.events[name].forEach(fn => {\n      fn(data);\n    });\n  }\n\n  /**\n   * Triggers a router error event.\n   *\n   * @param {string} name - The error event name (e.g., 'not_allow', 'not_found').\n   */\n  triggerError(name) {\n    switch (name) {\n      case 'not_allow':\n        this.emitEvent(\"notallow\", this);\n        break;\n\n      case 'not_found':\n        this.emitEvent(\"notfound\", this);\n        break;\n    }\n  }\n}\n\nexport * from \"./components.js\"","export class TurtleFormModuleValidatorRules {\n  /**\n   * Creates an instance of TurtleFormModuleValidatorRules.\n   */\n  constructor() {\n    this.validations = [];\n    this.errors = [];\n    this.fieldAlias = null;\n  }\n\n  /**\n   * Sets an alias for the field being validated.\n   * @param {string} name - The alias name for the field.\n   * @returns {TurtleFormModuleValidatorRules} The current instance for chaining.\n   */\n  alias(name) {\n    this.validations.push({\n      rule: (value) => true,\n    });\n    this.fieldAlias = name;\n    return this;\n  }\n\n  /**\n   * Validates that the value is not null or empty.\n   * @returns {TurtleFormModuleValidatorRules} The current instance for chaining.\n   */\n  isNotNull() {\n    this.validations.push({\n      rule: (value) => value !== null && value !== undefined && value.trim() !== \"\",\n      errorMessage: \"Value cannot be null or empty.\"\n    });\n    return this;\n  }\n\n  /**\n   * Validates that the value does not exceed the specified maximum length.\n   * @param {number} max - The maximum allowed length of the value.\n   * @returns {TurtleFormModuleValidatorRules} The current instance for chaining.\n   */\n  maxLength(max) {\n    this.validations.push({\n      rule: (value) => value.length <= max,\n      errorMessage: `Value must be at most ${max} characters long.`\n    });\n    return this;\n  }\n\n  /**\n   * Validates that the value meets the specified minimum length.\n   * @param {number} min - The minimum required length of the value.\n   * @returns {TurtleFormModuleValidatorRules} The current instance for chaining.\n   */\n  minLength(min) {\n    this.validations.push({\n      rule: (value) => value.length >= min,\n      errorMessage: `Value must be at least ${min} characters long.`\n    });\n    return this;\n  }\n\n  /**\n   * Validates that the value contains at least one number.\n   * @returns {TurtleFormModuleValidatorRules} The current instance for chaining.\n   */\n  containsNumber() {\n    this.validations.push({\n      rule: (value) => /\\d/.test(value),\n      errorMessage: \"Value must contain at least one number.\"\n    });\n    return this;\n  }\n\n  /**\n   * Validates that the value contains at least one uppercase letter.\n   * @returns {TurtleFormModuleValidatorRules} The current instance for chaining.\n   */\n  containsUppercase() {\n    this.validations.push({\n      rule: (value) => /[A-Z]/.test(value),\n      errorMessage: \"Value must contain at least one uppercase letter.\"\n    });\n    return this;\n  }\n\n  /**\n   * Validates that the value contains at least one lowercase letter.\n   * @returns {TurtleFormModuleValidatorRules} The current instance for chaining.\n   */\n  containsLowercase() {\n    this.validations.push({\n      rule: (value) => /[a-z]/.test(value),\n      errorMessage: \"Value must contain at least one lowercase letter.\"\n    });\n    return this;\n  }\n\n  /**\n   * Validates that the value contains at least one special character.\n   * @returns {TurtleFormModuleValidatorRules} The current instance for chaining.\n   */\n  containsSpecialChar() {\n    this.validations.push({\n      rule: (value) => /[!@#$%^&*(),.?\":{}|<>]/.test(value),\n      errorMessage: \"Value must contain at least one special character.\"\n    });\n    return this;\n  }\n\n  /**\n   * Validates that the value is a valid email address.\n   * @returns {TurtleFormModuleValidatorRules} The current instance for chaining.\n   */\n  isEmail() {\n    this.validations.push({\n      rule: (value) => /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(value),\n      errorMessage: \"Value must be a valid email address.\"\n    });\n    return this;\n  }\n\n  /**\n   * Validates that the value is a valid phone number in international format.\n   * @returns {TurtleFormModuleValidatorRules} The current instance for chaining.\n   */\n  isPhoneNumber() {\n    this.validations.push({\n      rule: (value) => /^\\+?[1-9]\\d{1,14}$/.test(value),\n      errorMessage: \"Value must be a valid phone number in international format.\"\n    });\n    return this;\n  }\n\n  /**\n   * Validates that the value is a valid date.\n   * @returns {TurtleFormModuleValidatorRules} The current instance for chaining.\n   */\n  isDate() {\n    this.validations.push({\n      rule: (value) => !isNaN(Date.parse(value)),\n      errorMessage: \"Value must be a valid date.\"\n    });\n    return this;\n  }\n\n  /**\n   * Validates that the date is before a specified date.\n   * @param {string} date - The date to compare against.\n   * @returns {TurtleFormModuleValidatorRules} The current instance for chaining.\n   */\n  isBefore(date) {\n    this.validations.push({\n      rule: (value) => new Date(value) < new Date(date),\n      errorMessage: `Date must be before ${date}.`\n    });\n    return this;\n  }\n\n  /**\n   * Validates that the date is after a specified date.\n   * @param {string} date - The date to compare against.\n   * @returns {TurtleFormModuleValidatorRules} The current instance for chaining.\n   */\n  isAfter(date) {\n    this.validations.push({\n      rule: (value) => new Date(value) > new Date(date),\n      errorMessage: `Date must be after ${date}.`\n    });\n    return this;\n  }\n\n  /**\n   * Validates that the value is within a specified range.\n   * @param {number} min - The minimum allowed value.\n   * @param {number} max - The maximum allowed value.\n   * @returns {TurtleFormModuleValidatorRules} The current instance for chaining.\n   */\n  isInRange(min, max) {\n    this.validations.push({\n      rule: (value) => value >= min && value <= max,\n      errorMessage: `Value must be between ${min} and ${max}.`\n    });\n    return this;\n  }\n\n  /**\n   * Validates that the value matches a specified regular expression.\n   * @param {RegExp} regex - The regular expression to test against.\n   * @returns {TurtleFormModuleValidatorRules} The current instance for chaining.\n   */\n  matchesRegex(regex) {\n    this.validations.push({\n      rule: (value) => regex.test(value),\n      errorMessage: `Value must match the required pattern.`\n    });\n    return this;\n  }\n\n  /**\n   * Validates that the value contains only alphabetic characters.\n   * @returns {TurtleFormModuleValidatorRules} The current instance for chaining.\n   */\n  isAlpha() {\n    this.validations.push({\n      rule: (value) => /^[a-zA-Z]+$/.test(value),\n      errorMessage: \"Value must contain only alphabetic characters.\"\n    });\n    return this;\n  }\n\n  /**\n   * Validates that the value contains only alphanumeric characters.\n   * @returns {TurtleFormModuleValidatorRules} The current instance for chaining.\n   */\n  isAlphaNumeric() {\n    this.validations.push({\n      rule: (value) => /^[a-zA-Z0-9]+$/.test(value),\n      errorMessage: \"Value must contain only alphanumeric characters.\"\n    });\n    return this;\n  }\n\n  /**\n   * Validates that the value contains only numeric characters.\n   * @returns {TurtleFormModuleValidatorRules} The current instance for chaining.\n   */\n  isNumeric() {\n    this.validations.push({\n      rule: (value) => /^[0-9]+$/.test(value),\n      errorMessage: \"Value must contain only numeric characters.\"\n    });\n    return this;\n  }\n\n  /**\n   * Validates that the value is a valid URL.\n   * @returns {TurtleFormModuleValidatorRules} The current instance for chaining.\n   */\n  isUrl() {\n    this.validations.push({\n      rule: (value) => /^(https?|ftp):\\/\\/[^\\s/$.?#].[^\\s]*$/.test(value),\n      errorMessage: \"Value must be a valid URL.\"\n    });\n    return this;\n  }\n\n  /**\n   * Validates that the value is equal to a specified value.\n   * @param {*} compareValue - The value to compare against.\n   * @returns {TurtleFormModuleValidatorRules} The current instance for chaining.\n   */\n  isEqualTo(compareValue) {\n    this.validations.push({\n      rule: (value) => value === compareValue,\n      errorMessage: `Value must be equal to ${compareValue}.`\n    });\n    return this;\n  }\n\n  /**\n   * Validates that the value is not equal to a specified value.\n   * @param {*} compareValue - The value to compare against.\n   * @returns {TurtleFormModuleValidatorRules} The current instance for chaining.\n   */\n  isNotEqualTo(compareValue) {\n    this.validations.push({\n      rule: (value) => value !== compareValue,\n      errorMessage: `Value must not be equal to ${compareValue}.`\n    });\n    return this;\n  }\n\n  /**\n   * Validates that the value starts with a specified prefix.\n   * @param {string} prefix - The prefix to check against.\n   * @returns {TurtleFormModuleValidatorRules} The current instance for chaining.\n   */\n  startsWith(prefix) {\n    this.validations.push({\n      rule: (value) => value.startsWith(prefix),\n      errorMessage: `Value must start with '${prefix}'.`\n    });\n    return this;\n  }\n\n  /**\n   * Validates that the value ends with a specified suffix.\n   * @param {string} suffix - The suffix to check against.\n   * @returns {TurtleFormModuleValidatorRules} The current instance for chaining.\n   */\n  endsWith(suffix) {\n    this.validations.push({\n      rule: (value) => value.endsWith(suffix),\n      errorMessage: `Value must end with '${suffix}'.`\n    });\n    return this;\n  }\n\n  /**\n   * Validates that the value is a positive number.\n   * @returns {TurtleFormModuleValidatorRules} The current instance for chaining.\n   */\n  isPositiveNumber() {\n    this.validations.push({\n      rule: (value) => !isNaN(value) && Number(value) > 0,\n      errorMessage: \"Value must be a positive number.\"\n    });\n    return this;\n  }\n\n  /**\n   * Validates that the value is a negative number.\n   * @returns {TurtleFormModuleValidatorRules} The current instance for chaining.\n   */\n  isNegativeNumber() {\n    this.validations.push({\n      rule: (value) => !isNaN(value) && Number(value) < 0,\n      errorMessage: \"Value must be a negative number.\"\n    });\n    return this;\n  }\n\n  /**\n   * Validates that the value is an integer.\n   * @returns {TurtleFormModuleValidatorRules} The current instance for chaining.\n   */\n  isInteger() {\n    this.validations.push({\n      rule: (value) => Number.isInteger(Number(value)),\n      errorMessage: \"Value must be an integer.\"\n    });\n    return this;\n  }\n\n  /**\n   * Validates that the value is a floating-point number.\n   * @returns {TurtleFormModuleValidatorRules} The current instance for chaining.\n   */\n  isFloat() {\n    this.validations.push({\n      rule: (value) => !isNaN(value) && value.toString().includes('.'),\n      errorMessage: \"Value must be a floating-point number.\"\n    });\n    return this;\n  }\n\n  validate(value) {\n    this.errors = [];\n    for (const validation of this.validations) {\n      if (!validation.rule(value)) {\n        this.errors.push(validation.errorMessage);\n      }\n    }\n    return this.errors.length === 0;\n  }\n\n  getErrors() {\n    return this.errors;\n  }\n\n}\n\n/**\n * Class representing a form validator module.\n */\nclass TurtleFormModuleValidator {\n  /**\n   * Creates an instance of the form validator.\n   * @param {Object} module - The module associated with the validator.\n   * @param {HTMLElement} element - The form element to validate.\n   */\n  constructor(module, element) {\n    this._module = module;\n    this.element = element;\n    this.events = {};\n    this.rules = {};\n  }\n\n  /**\n   * Registers an event listener for a specified event name.\n   * @param {string} name - The name of the event.\n   * @param {Function} callback - The callback function to execute when the event occurs.\n   */\n  on(name, callback) {\n    if (!this.events[name]) {\n      this.events[name] = [];\n    }\n    this.events[name].push(callback);\n  }\n\n  /**\n   * Unregisters an event listener for a specified event name.\n   * @param {string} name - The name of the event.\n   * @param {Function} callback - The callback function to remove.\n   */\n  off(name, callback) {\n    if (this.events[name]) {\n      this.events[name] = this.events[name].filter(cb => cb !== callback);\n    }\n  }\n\n  /**\n   * Validates the form elements based on defined rules and triggers the appropriate events.\n   */\n  validate() {\n    const values = {};\n    const errors = [];\n    for (const selector in this.rules) {\n      const value = this.element.querySelector(selector).value;\n      const validator = this.rules[selector];\n      if (!validator.validate(value)) {\n        errors.push({ field: selector, messages: validator.getErrors() });\n      } else {\n        values[validator.fieldAlias ?? selector] = value;\n      }\n    }\n\n    if (errors.length > 0) {\n      this.triggerEvent('error', errors);\n    } else {\n      this.triggerEvent('success', values);\n    }\n  }\n\n  /**\n   * Triggers an event with the specified name and data.\n   * @param {string} name - The name of the event to trigger.\n   * @param {*} data - The data to pass to the event callbacks.\n   */\n  triggerEvent(name, data) {\n    if (this.events[name]) {\n      this.events[name].forEach(callback => callback(data));\n    }\n  }\n\n  /**\n   * Validates the form when it is submitted, preventing default form submission if specified.\n   * @param {boolean} [prevent=true] - Whether to prevent the default form submission.\n   */\n  validateWhenSubmit(prevent = true) {\n    this.element.addEventListener(\"submit\", function(event) {\n      if (prevent) event.preventDefault();\n      this.validate();\n    }.bind(this));\n  }\n}\n\n/**\n * Class representing the form module in the application.\n */\nexport class TurtleFormModule {\n  /**\n   * Creates an instance of the form module.\n   * @param {Object} app - The application instance.\n   * @param {Object} configs - Configuration options for the form module.\n   */\n  constructor(app, configs) {\n    this._app = app;\n    this._app.modules.push(this);\n    this._app.form = this;\n    this.configs = configs;\n  }\n\n  /**\n   * Initializes the form module.\n   * @param {Object} app - The application instance.\n   * @param {Object} configs - Configuration options for the form module.\n   * @returns {TurtleFormModule} The initialized form module.\n   */\n  static init(app, configs) {\n    return new TurtleFormModule(app, configs);\n  }\n\n  /**\n   * Creates a form validator for a specified form element.\n   * @param {HTMLElement} element - The form element to validate.\n   * @returns {TurtleFormModuleValidator} The form validator instance.\n   */\n  createFormValidator(element) {\n    return new TurtleFormModuleValidator(this, element);\n  }\n}","/**\n * Dynamically loads a script into the document.\n *\n * @param {string} src - The source URL of the script to load.\n * @param {boolean} [asyncLoad=false] - Whether to load the script asynchronously.\n * @param {boolean} [module=false] - Whether the script should be loaded as a JavaScript module.\n * @param {HTMLScriptElement} [script] - The script element that will be created (optional).\n * @returns {Promise<void>} - A promise that resolves when the script is loaded, or rejects on error.\n */\nexport function addScript(src, asyncLoad = false, module = false, script) {\n  let d = document;\n  return new Promise((resolve, reject) => {\n    script = d.createElement('script');\n    script.type = 'text/javascript';\n    if (module) script.type = 'module';\n    script.async = asyncLoad;\n    script.onload = function() {\n      resolve();\n    };\n    script.onerror = function() {\n      reject(new Error(`Failed to load script: ${src}`));\n    };\n    script.src = src;\n    d.getElementsByTagName('body')[0].appendChild(script);\n  });\n}\n\n/**\n * Ensures that a namespace is available in the given context by dynamically loading a script if needed.\n *\n * @param {string} name - The name of the namespace to check.\n * @param {Object} context - The context in which to check for the namespace (usually the global object).\n * @param {string} path - The path to the script that defines the namespace.\n * @param {boolean} defer - Whether to defer loading of the script.\n * @param {boolean} [module=false] - Whether the script should be loaded as a JavaScript module.\n * @param {boolean} [raise=false] - Whether to throw an error if the script fails to load.\n * @returns {Promise<void>} - A promise that resolves when the namespace is available.\n */\nexport async function ensureNamespace(name, context, path, defer, module = false, raise = false) {\n  if (!(name in context)) {\n    try {\n      await addScript(path, defer, module);\n    } catch (error) {\n      if (raise) {\n        throw new Error(`Failed to ensure namespace: ${name} - ${error.message}`);\n      }\n    }\n  }\n}","/**\n * Creates a throttled function that only invokes the provided function at \n * most once per specified time interval.\n *\n * @param {Function} func - The function to throttle.\n * @param {number} limit - The time interval in milliseconds to limit the \n *                         function calls.\n * @returns {Function} A new throttled function.\n *\n * @example\n * const handleScroll = throttle(() => {\n *   console.log('Scroll event triggered');\n * }, 1000);\n *\n * window.addEventListener('scroll', handleScroll);\n */\nfunction throttle(func, limit) {\n  let lastFunc;\n  let lastRan;\n\n  return function(...args) {\n    const context = this;\n\n    if (!lastRan) {\n      func.apply(context, args);\n      lastRan = Date.now();\n    } else {\n      clearTimeout(lastFunc);\n      lastFunc = setTimeout(function() {\n        if ((Date.now() - lastRan) >= limit) {\n          func.apply(context, args);\n          lastRan = Date.now();\n        }\n      }, limit - (Date.now() - lastRan));\n    }\n  };\n}\n\n/**\n * Creates a debounced function that delays invoking the provided function \n * until after a specified delay period has elapsed since the last time the \n * debounced function was invoked.\n *\n * @param {Function} func - The function to debounce.\n * @param {number} delay - The number of milliseconds to delay.\n * @returns {Function} A new debounced function.\n *\n * @example\n * const handleResize = debounce(() => {\n *   console.log('Resize event triggered');\n * }, 200);\n *\n * window.addEventListener('resize', handleResize);\n */\nfunction debounce(func, delay) {\n  let timeoutId;\n\n  return function(...args) {\n    if (timeoutId) clearTimeout(timeoutId);\n\n    timeoutId = setTimeout(() => {\n      func.apply(this, args);\n    }, delay);\n  };\n}\n\nexport const performance = {\n  debounce,\n  throttle\n};","window.__TURTLE__={\n  dev:false,\n  version:\"2.0.0\"\n}\n\nexport * from \"./component/base.js\"\nexport * from \"./component/component.js\"\nexport * from \"./render/data.js\"\nexport * from \"./service/service.js\"\nexport * from \"./context/context.js\"\nexport * from \"./app/app.js\"\nexport * from \"./modules/index.js\"\nexport * from \"./features/index.js\"\nexport {TurtleRenderHelper} from \"./render/render.js\"","import {initDevMode} from \"./dev/dev.js\"\n\nif(!window.__TURTLE__.dev){\n  window.__TURTLE__.dev = true\n  initDevMode()\n}\n\nexport * from \"./index.js\"\nexport * from \"./dev/emitter.js\"\nexport * as TurtleDevEvents from \"./dev/events.js\""],"names":["TurtleDevEvents.APP_INIT","TurtleDevEvents.COMPONENT_INIT","TURTLE_DEV_EVENTS.COMPONENT_ATTACHED","TURTLE_DEV_EVENTS.COMPONENT_INIT","TURTLE_DEV_EVENTS.COMPONENT_UPDATED","TURTLE_DEV_EVENTS.COMPONENT_RENDERED","TURTLE_DEV_EVENTS.APP_INIT","TURTLE_DEV_EVENTS.APP_ATTACHED"],"mappings":"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"}